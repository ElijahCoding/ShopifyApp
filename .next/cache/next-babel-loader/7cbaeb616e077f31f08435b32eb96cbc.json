{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query getProducts($ids: [ID!]!) {\\n        nodes(ids: $ids) {\\n            ... on Product {\\n                title\\n                handle\\n                id\\n                images(first: 1) {\\n                    edges {\\n                        node {\\n                            originalSrc\\n                            altText\\n                        }\\n                    }\\n                }\\n                variants(first: 1) {\\n                    edges {\\n                        node {\\n                            price\\n                            id\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Card, Button, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\nvar GET_PRODUCTS_BY_ID = gql(_templateObject());\n\nfunction ProductList() {\n  _s();\n\n  var _useQuery = useQuery(GET_PRODUCTS_BY_ID, {\n    variables: {\n      ids: store.get('ids')\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"div\", null, \"Loading...\");\n  if (error) return __jsx(\"div\", null, error.message);\n  return __jsx(Card, null, __jsx(ResourceList, {\n    showHeader: true,\n    resourceName: {\n      singular: 'Product',\n      plural: 'Products'\n    },\n    items: data.nodes,\n    renderItem: function renderItem(item) {\n      var media = __jsx(Thumbnail, {\n        source: item.images.edges[0] ? item.images.edges[0].node.originalSrc : '',\n        alt: item.images.edges[0] ? item.images.edges[0].altText : ''\n      });\n    }\n  }));\n}\n\n_s(ProductList, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductList;\nexport default ProductList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"sources":["/Users/elijah/Desktop/Projects/ShopifyApp/components/ResourceList.js"],"names":["gql","useQuery","Card","Button","ResourceList","Stack","TextStyle","Thumbnail","store","GET_PRODUCTS_BY_ID","ProductList","variables","ids","get","loading","error","data","message","singular","plural","nodes","item","media","images","edges","node","originalSrc","altText"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,YAAvB,EAAqCC,KAArC,EAA4CC,SAA5C,EAAuDC,SAAvD,QAAwE,kBAAxE;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,IAAMC,kBAAkB,GAAGT,GAAH,mBAAxB;;AA4BA,SAASU,WAAT,GAAuB;AAAA;;AAAA,kBACcT,QAAQ,CAACQ,kBAAD,EAAqB;AAAEE,IAAAA,SAAS,EAAE;AAAEC,MAAAA,GAAG,EAAEJ,KAAK,CAACK,GAAN,CAAU,KAAV;AAAP;AAAb,GAArB,CADtB;AAAA,MACXC,OADW,aACXA,OADW;AAAA,MACFC,KADE,aACFA,KADE;AAAA,MACKC,IADL,aACKA,IADL;;AAGnB,MAAIF,OAAJ,EAAa,OAAO,gCAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,mBAAMA,KAAK,CAACE,OAAZ,CAAP;AAEX,SACI,MAAC,IAAD,QACI,MAAC,YAAD;AACI,IAAA,UAAU,MADd;AAEI,IAAA,YAAY,EAAE;AAAEC,MAAAA,QAAQ,EAAE,SAAZ;AAAuBC,MAAAA,MAAM,EAAE;AAA/B,KAFlB;AAGI,IAAA,KAAK,EAAEH,IAAI,CAACI,KAHhB;AAII,IAAA,UAAU,EAAE,oBAAAC,IAAI,EAAI;AAChB,UAAMC,KAAK,GACP,MAAC,SAAD;AACI,QAAA,MAAM,EACFD,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,IAAuBH,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,EAAqBC,IAArB,CAA0BC,WAAjD,GAA+D,EAFvE;AAII,QAAA,GAAG,EACCL,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,IAAuBH,IAAI,CAACE,MAAL,CAAYC,KAAZ,CAAkB,CAAlB,EAAqBG,OAA5C,GAAsD;AAL9D,QADJ;AAWH;AAhBL,IADJ,CADJ;AAwBH;;GA9BQjB,W;UAC4BT,Q;;;KAD5BS,W;AAgCT,eAAeA,WAAf","sourcesContent":["import gql from 'graphql-tag'\nimport { useQuery } from '@apollo/react-hooks'\nimport { Card, Button, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js'\n\nconst GET_PRODUCTS_BY_ID = gql`\n    query getProducts($ids: [ID!]!) {\n        nodes(ids: $ids) {\n            ... on Product {\n                title\n                handle\n                id\n                images(first: 1) {\n                    edges {\n                        node {\n                            originalSrc\n                            altText\n                        }\n                    }\n                }\n                variants(first: 1) {\n                    edges {\n                        node {\n                            price\n                            id\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n\nfunction ProductList() {\n    const { loading, error, data } = useQuery(GET_PRODUCTS_BY_ID, { variables: { ids: store.get('ids') } })\n\n    if (loading) return <div>Loading...</div>\n    if (error) return <div>{error.message}</div>\n\n    return (\n        <Card>\n            <ResourceList\n                showHeader\n                resourceName={{ singular: 'Product', plural: 'Products' }}\n                items={data.nodes}\n                renderItem={item => {\n                    const media = (\n                        <Thumbnail\n                            source={\n                                item.images.edges[0] ? item.images.edges[0].node.originalSrc : ''\n                            }\n                            alt={\n                                item.images.edges[0] ? item.images.edges[0].altText : ''\n                            }\n                        />\n                    );\n                    \n                }}\n            >\n\n            </ResourceList>\n        </Card>\n    );\n}\n\nexport default ProductList;"]},"metadata":{},"sourceType":"module"}