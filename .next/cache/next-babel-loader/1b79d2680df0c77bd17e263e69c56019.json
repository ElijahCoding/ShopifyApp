{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query getProducts($ids: [ID!]!) {\\n        nodes(ids: $ids) {\\n            ... on Product {\\n                title\\n                handle\\n                id\\n                images(first: 1) {\\n                    edges {\\n                        node {\\n                            originalSrc\\n                            altText\\n                        }\\n                    }\\n                }\\n                variants(first: 1) {\\n                    edges {\\n                        node {\\n                            price\\n                            id\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Card, Button, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js';\nvar GET_PRODUCTS_BY_ID = gql(_templateObject());\n\nfunction ProductList() {\n  _s();\n\n  var _useQuery = useQuery(GET_PRODUCTS_BY_ID, {\n    variables: {\n      ids: store.get('ids')\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"div\", null, \"Loading...\");\n  if (error) return __jsx(\"div\", null, error.message);\n  return __jsx(\"div\", null, __jsx(\"h1\", null, \"selected products:\"), data.nodes.map(function (item) {\n    return __jsx(\"p\", {\n      key: item.id\n    }, item.title);\n  }));\n}\n\n_s(ProductList, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = ProductList;\nexport default ProductList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductList\");","map":{"version":3,"sources":["/Users/elijah/Desktop/Projects/ShopifyApp/components/ResourceList.js"],"names":["gql","useQuery","Card","Button","ResourceList","Stack","TextStyle","Thumbnail","store","GET_PRODUCTS_BY_ID","ProductList","variables","ids","get","loading","error","data","message","nodes","map","item","id","title"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,YAAvB,EAAqCC,KAArC,EAA4CC,SAA5C,EAAuDC,SAAvD,QAAwE,kBAAxE;AACA,OAAOC,KAAP,MAAkB,UAAlB;AAEA,IAAMC,kBAAkB,GAAGT,GAAH,mBAAxB;;AA4BA,SAASU,WAAT,GAAuB;AAAA;;AAAA,kBACcT,QAAQ,CAACQ,kBAAD,EAAqB;AAAEE,IAAAA,SAAS,EAAE;AAAEC,MAAAA,GAAG,EAAEJ,KAAK,CAACK,GAAN,CAAU,KAAV;AAAP;AAAb,GAArB,CADtB;AAAA,MACXC,OADW,aACXA,OADW;AAAA,MACFC,KADE,aACFA,KADE;AAAA,MACKC,IADL,aACKA,IADL;;AAGnB,MAAIF,OAAJ,EAAa,OAAO,gCAAP;AACb,MAAIC,KAAJ,EAAW,OAAO,mBAAMA,KAAK,CAACE,OAAZ,CAAP;AAEX,SACI,mBACI,uCADJ,EAGQD,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAe,UAAAC,IAAI,EAAI;AACnB,WACI;AAAG,MAAA,GAAG,EAAEA,IAAI,CAACC;AAAb,OAAkBD,IAAI,CAACE,KAAvB,CADJ;AAGH,GAJD,CAHR,CADJ;AAYH;;GAlBQZ,W;UAC4BT,Q;;;KAD5BS,W;AAoBT,eAAeA,WAAf","sourcesContent":["import gql from 'graphql-tag'\nimport { useQuery } from '@apollo/react-hooks'\nimport { Card, Button, ResourceList, Stack, TextStyle, Thumbnail } from '@shopify/polaris';\nimport store from 'store-js'\n\nconst GET_PRODUCTS_BY_ID = gql`\n    query getProducts($ids: [ID!]!) {\n        nodes(ids: $ids) {\n            ... on Product {\n                title\n                handle\n                id\n                images(first: 1) {\n                    edges {\n                        node {\n                            originalSrc\n                            altText\n                        }\n                    }\n                }\n                variants(first: 1) {\n                    edges {\n                        node {\n                            price\n                            id\n                        }\n                    }\n                }\n            }\n        }\n    }\n`;\n\nfunction ProductList() {\n    const { loading, error, data } = useQuery(GET_PRODUCTS_BY_ID, { variables: { ids: store.get('ids') } })\n\n    if (loading) return <div>Loading...</div>\n    if (error) return <div>{error.message}</div>\n\n    return (\n        <div>\n            <h1>selected products:</h1>\n            {\n                data.nodes.map(item => {\n                    return (\n                        <p key={item.id}>{item.title}</p>\n                    )\n                })\n            }\n        </div>\n    );\n}\n\nexport default ProductList;"]},"metadata":{},"sourceType":"module"}